#!/usr/bin/env python

import logbook

from dulwich import pack
from dulwich.object_store import DiskObjectStore
from dulwich.repo import Repo

from gitutil import GitRemoteHandler

log = logbook.Logger('git-remote-s3')


class S3Handler(GitRemoteHandler):
#	supported_options = ['dry-run']
	# FIXME: use fallback to use smart protocol for what we can actually push?

	def __init__(self, ref_store, object_store, *args, **kwargs):
		super(S3Handler, self).__init__(*args, **kwargs)
		self.ref_store = ref_store
		self.object_store = object_store

	def git_list(self, *args):
		for name, hash in self.ref_store.iteritems():
			print '%s %s' % (hash, name)
		print

	def git_push(self, target):
		log.debug('push args: %s' % target)
		src, dst = target.split(':')
		log.debug('push: %s to %s' % (src, dst))

		# use git-rev-list to find out what we need to transfer
		# FIXME: be smart
		local = Repo('.git')

		# do the actual push
		print "ok %s" % dst
		print


if __name__ == '__main__':
	loghandler = logbook.FileHandler('git-remote-test.log', encoding = 'utf-8')
	S3Handler(None, None).run()
