#!/usr/bin/env python

import logbook

from dulwich import pack
from dulwich.object_store import DiskObjectStore
from dulwich.repo import Repo

from gitutil import GitRemoteHandler, parse_s3_url, HandlerException, merge_git_config

log = logbook.Logger('git-remote-s3')

def get_from_sections(conf, sections, key):
	log.debug('Loading %s from sections %r' % (key, sections))
	for section in sections:
		if section in conf and key in conf[section]:
			return conf[section][key]


class S3Handler(GitRemoteHandler):
#	supported_options = ['dry-run']
	# FIXME: use fallback to use smart protocol for what we can actually push?

	def __init__(self, ref_store, object_store, *args, **kwargs):
		super(S3Handler, self).__init__(*args, **kwargs)
		self.ref_store = ref_store
		self.object_store = object_store

		# parse URL
		remote_s3 = parse_s3_url(self.remote_address)
		log.debug('Remote URL %s parsed to %s' % (self.remote_address, remote_s3))

		# load git configuration
		conf = merge_git_config()

		# the sections in gut config files we are reading
		conf_sections = ['remote "%s"' % self.remote_name, 's3']

		self.remote_bucket = remote_s3['bucket']
		self.remote_prefix = remote_s3['prefix'] or ''
		self.remote_key = remote_s3['key'] or get_from_sections(conf, conf_sections, 'key')
		if not self.remote_key: HandlerException('No access key specified. Cannot access bucket %s' % self.remote_bucket)

		# load a secret for a specific key
		self.remote_secret = remote_s3['secret'] or get_from_sections(conf, conf_sections, '%s-secret' % self.remote_key)
		if not self.remote_secret: raise HandlerException('No secret key specified. Cannot access bucket %s' % self.remote_bucket)

		log.debug('loaded credentials, final url: http://%s:%s@%s:%s' % (self.remote_key, self.remote_secret, self.remote_bucket, self.remote_prefix))

		raise Exception('DONE')

	def git_list(self, *args):
		for name, hash in self.ref_store.iteritems():
			print '%s %s' % (hash, name)
		print

	def git_push(self, target):
		log.debug('push args: %s' % target)
		src, dst = target.split(':')
		log.debug('push: %s to %s' % (src, dst))

		# use git-rev-list to find out what we need to transfer
		# FIXME: be smart
		local = Repo('.git')

		# do the actual push
		print "ok %s" % dst
		print


if __name__ == '__main__':
	try:
		loghandler = logbook.FileHandler('git-remote-test.log', encoding = 'utf-8')
		S3Handler(None, None).run()
	except HandlerException, e:
		log.critical(e)
	except Exception, e:
		log.exception(e)
