#!/usr/bin/env python

import os
import sys
import logbook

from dulwich import pack
from dulwich.object_store import DiskObjectStore
from dulwich.repo import Repo

log = logbook.Logger('git-remote-test')
stdin_log = logbook.Logger('stdin')
stdout_log = logbook.Logger('stdout')

def required_capability(f):
	f.git_required = True
	return f


class GitRemoteHandler(object):
	supported_options = []
	def __init__(self, loghandler = None):
		self.loghandler = loghandler or logbook.NullHandler()
		self.args = sys.argv[1:]

		self.remote_name = None
		self.remote_address = None
		if 2 == len(self.args):
			self.remote_address = self.args[1]
			if self.args[1] != self.args[0]: self.remote_name = self.args[0]

		self.options = {}

	def handle_command(self, line):
		args = line.split(' ')
		command = args.pop(0)

		stdin_log.debug(line)
		if not hasattr(self, 'git_' + command): raise AttributeError('git requested an unsupported command: %s' % command)
		getattr(self, 'git_' + command)(*args)
		try:
			sys.stdout.flush()
		except IOError:
			# git closed the connection
			pass

	def git_capabilities(self):
		caps = []
		for name in dir(self):
			if 'git_capabilities' == name: continue
			attr = getattr(self,name)
			if name.startswith('git_') and callable(attr):
				caps.append('*' + name[4:] if hasattr(attr, 'git_required') else name[4:])

		log.debug('sending capabilities: %s' % caps)
		for c in caps: print c

		# end with a blank line
		print

	def run(self):
		with self.loghandler.applicationbound():
			log.debug('spawned process: %d' % os.getpid())
			log.debug('remote name: %s' % self.remote_name)
			log.debug('remote address: %s' % self.remote_address)
			while not sys.stdin.closed:
				line = sys.stdin.readline()
				if '' == line: break # EOF
				if '' == line.strip(): break # empty line ends as well
				try:
					self.handle_command(line.rstrip(os.linesep))
				except Exception, e:
					log.exception(e)
					print >>sys.stderr, os.path.basename(sys.argv[0]) + ':', e
					break


class TestHandler(GitRemoteHandler):
#	supported_options = ['dry-run']
	# FIXME: use fallback to use smart protocol for what we can actually push?

	def __init__(self, ref_store, object_store, *args, **kwargs):
		super(TestHandler, self).__init__(*args, **kwargs)
		self.ref_store = ref_store
		self.object_store = object_store

	def git_list(self, *args):
		for name, hash in self.ref_store.iteritems():
			print '%s %s' % (hash, name)
		print

	def git_push(self, target):
		log.debug('push args: %s' % target)
		src, dst = target.split(':')
		log.debug('push: %s to %s' % (src, dst))

		# use git-rev-list to find out what we need to transfer
		# FIXME: be smart
		local = Repo('.git')

		# do the actual push
		print "ok %s" % dst
		print

	def git_option(self, name, value):
		if name in self.supported_options:
			self.options[name] = value
			log.debug('option %s: %s' % (name, value))
			print "ok"
		else:
			log.debug('option %s unsupported' % name)
			print "unsupported"

if __name__ == '__main__':
	loghandler = logbook.FileHandler('git-remote-test.log', encoding = 'utf-8')
	#GitServerHandler(server = TestServer(), loghandler = loghandler).run()
	TestHandler(None, None, loghandler).run()
